#
#  $Id$
#
#  CONFIG_COMMON
#
#  This file is to be maintained by the community.
#
# Common Configuration Information 

#-------------------------------------------------------
# Build architectures

# CROSS1 will be defined only when CROSS_COMPILER_HOST_ARCHS is NOT defined
CROSS1 = $(CROSS_COMPILER_TARGET_ARCHS$(word 1,$(CROSS_COMPILER_HOST_ARCHS)))

# CROSS2 will be defined only when CROSS_COMPILER_HOST_ARCHS is defined
# and HOST_ARCH is one of it's words  
CROSS2 = $(CROSS_COMPILER_TARGET_ARCHS$(filter-out 1,$(words $(filter $(HOST_ARCH),$(CROSS_COMPILER_HOST_ARCHS)))))

BUILD_ARCHS = $(HOST_ARCH) $(CROSS1) $(CROSS2)

#-------------------------------------------------------
# Divider and suffix

DIVIDER = .
OBJ = .
RES = .

#-------------------------------------------------------
# Default for perl if it's on the PATH,
# otherwise override this in os/CONFIG_SITE.Host.<host_arch>
PERL=perl

#-------------------------------------------------------
# Directories

INSTALL_LOCATION            = $(TOP)
TOOLS = $(CONFIG)/tools

INSTALL_LOCATION_LIB        = $(INSTALL_LOCATION)/lib
INSTALL_LOCATION_BIN        = $(INSTALL_LOCATION)/bin

INSTALL_INCLUDE             = $(INSTALL_LOCATION)/include
INSTALL_DOC                 = $(INSTALL_LOCATION)/doc
INSTALL_HTML                = $(INSTALL_LOCATION)/html
INSTALL_MAN                 = $(INSTALL_LOCATION)/man
INSTALL_TEMPLATES           = $(INSTALL_LOCATION)/templates
INSTALL_DBD                 = $(INSTALL_LOCATION)/dbd
INSTALL_CONFIG              = $(INSTALL_LOCATION)/configure
INSTALL_JAVA                = $(INSTALL_LOCATION)/javalib

INSTALL_LIB                 = $(INSTALL_LOCATION_LIB)/$(T_A)
INSTALL_TCLLIB              = $(INSTALL_LOCATION_LIB)/$(T_A)
INSTALL_BIN                 = $(INSTALL_LOCATION_BIN)/$(T_A)

ifdef T_A

#-------------------------------------------------------
# tools for installing libraries and products
INSTALL = $(PERL) $(TOOLS)/installEpics.pl
INSTALL_PRODUCT = $(INSTALL)
INSTALL_LIBRARY = $(INSTALL)

#-------------------------------------------------------
# vpath directories
GENERIC_SRC_DIRS = . .. $(SRC_DIRS)
OS_SRC_DIRS += $(foreach dir, $(SRC_DIRS) .., \
            $(dir)/os/$(OS_CLASS) $(dir)/os/posix $(dir)/os/default )
ALL_SRC_DIRS = $(OS_SRC_DIRS) $(GENERIC_SRC_DIRS)

#-------------------------------------------------------
# compile line include directories
INSTALL_INCLUDES += \
       -I$(INSTALL_INCLUDE)/os/$(OS_CLASS) \
       -I$(INSTALL_INCLUDE) 
GENERIC_SRC_INCLUDES = $(addprefix -I, $(GENERIC_SRC_DIRS))

#--------------------------------------------------
# GNU compiler defaults

GCC = $(GNU_BIN)/cc$(CMPLR_SUFFIX) -D INLINE=__inline__
GCC_AR = $(GNU_BIN)/ar$(CMPLR_SUFFIX)
GCC_CPP = $(GNU_BIN)/cc$(CMPLR_SUFFIX) -x c -E
GCC_RANLIB = $(GNU_BIN)/ranlib$(CMPLR_SUFFIX)
GCC_LD = $(GNU_BIN)/ld$(CMPLR_SUFFIX) -r

NM = $(GNU_BIN)/nm$(CMPLR_SUFFIX)
MUNCH = $(GNU_BIN)/munch

GCC_ANSI = $(GCC) -ansi 
GCC_STRICT = $(GCC) -ansi -pedantic
GCC_TRAD = $(GCC) -traditional
GCC_WARN_YES = -Wall
GCC_WARN_NO = -w
GCC_OPT_YES = -O3
GCC_OPT_NO = -g
GCC_SFLAGS_YES = -static
GCC_SFLAGS_NO =
GCC_SLIBS_YES =
GCC_SLIBS_NO =
GCC_CFLAGS_CROSS = -B$(GNU_LIB)/gcc-lib/ -nostdinc
GCC_CPPFLAGS_CROSS = -nostdinc
GCC_SHRLIB_CFLAGS_YES =  -fPIC -D_REENTRANT

GCC_SHRLIB_LDFLAGS_YES =  -shared

G++ = $(GNU_BIN)/cc$(CMPLR_SUFFIX)
G++_LD = $(GNU_BIN)/ld$(CMPLR_SUFFIX) -r

G++_NORMAL = $(G++) -ansi -pedantic
G++_STRICT = $(G++) -ansi -pedantic -Wtraditional
G++_TRAD = $(G++) -traditional
G++_TEMPL_INST_FLAG = -DEXPL_TEMPL
G++_WARN_YES = -Wall \
      -Wmissing-prototypes -Woverloaded-virtual \
      -Wwrite-strings -Wconversion -Wstrict-prototypes\
      -Wpointer-arith -Winline
G++_WARN_NO = -w
G++_OPT_YES = -O3
G++_OPT_NO = -g
G++_SFLAGS_YES = -static
G++_SFLAGS_NO =
G++_SLIBS_YES =
G++_SLIBS_NO =
G++_DEPENDS_FLAG = -MM
G++_SHRLIB_CFLAGS_YES =  -fPIC -D_REENTRANT

G++_SHRLIB_LDFLAGS_YES =  -shared

#--------------------------------------------------
# C compiler
CC = $($(ANSI)_$(CMPLR)) $(GCC_CFLAGS_$(BUILD_CLASS))
AR = $($(ANSI)_AR)
CPP =  $($(ANSI)_CPP) $(GCC_CPPFLAGS_$(BUILD_CLASS))
RANLIB =  $($(ANSI)_RANLIB)
LD = $($(ANSI)_LD)

#--------------------------------------------------
# C++ compiler
CXX = $($(CPLUSPLUS)_$(CXXCMPLR)) $(GCC_CFLAGS_$(BUILD_CLASS))
CXX_LD = $($(CPLUSPLUS)_LD)

#---------------------------------------------------------------
# Vendor compiler dependent options
VENDOR_DEP_CFLAGS = $($(ANSI)_DEP_CFLAGS)
VENDOR_DEP_CXXFLAGS = $($(CPLUSPLUS)_DEP_CFLAGS)

#---------------------------------------------------------------
# Architecture dependent options (solaris,sun4,mv167,...)
ARCH_DEP_CFLAGS =
ARCH_DEP_CXXFLAGS = $(ARCH_DEP_CFLAGS)
ARCH_DEP_LDFLAGS =
ARCH_DEP_LDLIBS =

#---------------------------------------------------------------
# Operating system dependent options (Unix,Vx,WIN32...)
OP_SYS_CFLAGS =
OP_SYS_LDFLAGS =
OP_SYS_INCLUDES =
OP_SYS_LDLIBS =

#--------------------------------------------------
# SOURCE* used by WIN32 only
SOURCE_CFLAG =
SOURCE_CXXCFLAG =

#--------------------------------------------------
# Makefile specific options
USR_INCLUDES =
USR_CFLAGS =
USR_CXXFLAGS =
USR_LDFLAGS =
USR_LDLIBS =
USR_CPPFLAGS =
USR_DBDFLAGS =

#--------------------------------------------------
# Target specific options
TARGET_INCLUDES = $($(basename $@)_INCLUDES) $($(basename $@)_INCLUDES_$(OS_CLASS))
TARGET_CFLAGS = $($(basename $@)_CFLAGS) $($(basename $@)_CFLAGS_$(OS_CLASS))
TARGET_CXXFLAGS = $($(basename $@)_CXXFLAGS) $($(basename $@)_CXXFLAGS_$(OS_CLASS))
TARGET_LDFLAGS = $($(basename $@)_LDFLAGS) $($(basename $@)_LDFLAGS_$(OS_CLASS))
TARGET_LDLIBS = $($(basename $@)_LDLIBS) $($(basename $@)_LDLIBS_$(OS_CLASS))
TARGET_CPPFLAGS = $($(basename $@)_CPPFLAGS) $($(basename $@)_CPPFLAGS_$(OS_CLASS))
TARGET_SNCFLAGS = $($(basename $@)_SNCFLAGS) $($(basename $@)_SNCFLAGS_$(OS_CLASS))

#--------------------------------------------------
# Depends flag
DEPENDS_FLAG = $($(CPLUSPLUS)_DEPENDS_FLAG)

#--------------------------------------------------
# C++ template flag option
TEMPL_INST_CXXFLAG = $($(CPLUSPLUS)_TEMPL_INST_FLAG)

#--------------------------------------------------
# dbd directory
INSTALL_DBDFLAGS = -I $(INSTALL_LOCATION)/dbd

#--------------------------------------------------
# POSIX flags
#####POSIX = YES
#####POSIX_FLAGS_YES = -D_POSIX_C_SOURCE
#####POSIX_FLAGS_NO = 
#####POSIX_FLAGS = $(POSIX_FLAGS_$(POSIX))

#--------------------------------------------------
# Warnings flags  (CONFIG.<arch> will override)
# final value determined in RULES_BUILD
WARN=$(HOST_WARN)
WARN_CFLAGS = $($(ANSI)_WARN_$(WARN))
WARN_CXXFLAGS = $($(CPLUSPLUS)_WARN_$(WARN))

#--------------------------------------------------
# Optimization flags  (CONFIG.<arch> will override)
# final value determined in RULES_BUILD
OPT=$(HOST_OPT)
OPT_CFLAGS = $($(ANSI)_OPT_$(OPT))
OPT_CXXFLAGS = $($(CPLUSPLUS)_OPT_$(OPT))
OPT_LDFLAGS =

#--------------------------------------------------
# Static build options
STATIC_CFLAGS = $($(ANSI)_SFLAGS_$(STATIC_BUILD))
STATIC_CXXCFLAGS = $($(CPLUSPLUS)_SFLAGS_$(STATIC_BUILD))
STATIC_LDFLAGS = $($(ANSI)_SLDFLAGS_$(STATIC_BUILD))
STATIC_LDLIBS = $($(ANSI)_SLIBS_$(STATIC_BUILD))

#--------------------------------------------------
# ar definition default
ARCMD = $(AR) $(ARFLAGS) $@

#--------------------------------------------------
# depends definition 
DEPENDS_RULE = -$(COMPILE.cpp) $(DEPENDS_FLAG) $^ > DEPENDS

#--------------------------------------------------
# Include files
INCLUDES = $(USR_INCLUDES) $(INSTALL_INCLUDES) \
    $(TARGET_INCLUDES) $(GENERIC_SRC_INCLUDES) $(OP_SYS_INCLUDES)

#--------------------------------------------------
# Flags

CFLAGS = $(OPT_CFLAGS) $(DEBUG_CFLAGS) $(WARN_CFLAGS) $(TARGET_CFLAGS)\
 $(USR_CFLAGS) $(ARCH_DEP_CFLAGS) $(VENDOR_DEP_CFLAGS) $(STATIC_CFLAGS)\
 $(OP_SYS_CFLAGS) $(INCLUDES)

CXXFLAGS = $(OPT_CXXFLAGS) $(DEBUG_CXXFLAGS) $(WARN_CXXFLAGS) $(TARGET_CXXFLAGS)\
 $(USR_CXXFLAGS) $(ARCH_DEP_CXXFLAGS) $(VENDOR_DEP_CXXFLAGS) $(STATIC_CXXCFLAGS)\
 $(OP_SYS_CFLAGS) $(TEMPL_INST_CXXFLAG) $(INCLUDES)

LDFLAGS = $(OPT_LDFLAGS) $(TARGET_LDFLAGS) $(USR_LDFLAGS) $(DEPLIB_LDFLAGS)\
 $(ARCH_DEP_LDFLAGS) $(STATIC_LDFLAGS) $(OP_SYS_LDFLAGS)

LDLIBS = $(TARGET_LDLIBS) $(USR_LDLIBS) $(DEPLIB_LDLIBS) $(ARCH_DEP_LDLIBS)\
 $(STATIC_LDLIBS) $(OP_SYS_LDLIBS)

CPPFLAGS += $(EPICS_BASE_CPPFLAGS) $(TARGET_CPPFLAGS) $(USR_CPPFLAGS) $(ARCH_DEP_CPPFLAGS)

CPPSNCFLAGS = $(INCLUDES)

DBDFLAGS = $(USR_DBDFLAGS) -I . -I .. $(INSTALL_DBDFLAGS)

#--------------------------------------------------
# Build compile line here

COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) -c $(SOURCE_FLAG)
COMPILE.cpp = $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(SOURCE_CXXFLAG)



#---------------------------------------------------------------
# Man pages

MANLIST = 1 2 3 4 5 6 7 8 9
MAN_DIRECTORY_TARGETS = $(foreach n, $(MANLIST),$(INSTALL_MAN)/man$(n))

#---------------------------------------------------------------
# Directory targets

DIRECTORY_TARGETS += $(INSTALL_DBD) $(INSTALL_INCLUDE)

#---------------------------------------------------------------
# Names of installed items 
#
#	each list starts with the destination directory name(s)
#	to make sure it's there

INSTALL_PROD= $(PROD:%= $(INSTALL_BIN)/%)
INSTALL_LIBS= $(LIBNAME_IOC:%=$(INSTALL_LIB)/%)
INSTALL_LIBS+= $(LIBNAME_HOST:%=$(INSTALL_LIB)/%)
INSTALL_SHRLIBS= $(SHRLIBNAME_IOC:%=$(INSTALL_SHRLIB)/%)
INSTALL_SHRLIBS+= $(SHRLIBNAME_HOST:%=$(INSTALL_SHRLIB)/%)
INSTALL_DLL_LINK_LIBS=$(DLL_LINK_LIBNAME_IOC:%=$(INSTALL_LIB)/%)
INSTALL_DLL_LINK_LIBS+=$(DLL_LINK_LIBNAME_HOST:%=$(INSTALL_LIB)/%)
INSTALL_TCLLIBS=$(TCLLIBNAME:%=$(INSTALL_TCLLIB)/%)
INSTALL_TCLINDEX=$(TCLINDEX:%=$(INSTALL_TCLLIB)/%)
INSTALL_SCRIPTS = $(SCRIPTS:%= $(INSTALL_BIN)/%)
INSTALL_OBJS = $(OBJS:%= $(INSTALL_BIN)/%)

INCREC +=$(RECTYPES) $(MENUS)
INSTALL_INCREC = $(INCREC:%= $(INSTALL_INCLUDE)/%)
INSTALL_MANS = $(foreach n, \
        $(MANLIST), $(MAN$(n):%= $(INSTALL_MAN)/man$(n)/%))
INSTALL_DOCS = $(DOCS:%= $(INSTALL_DOC)/%)
INSTALL_HTMLS = $(HTMLS:%= $(INSTALL_HTML)/$(HTMLS_DIR)/%)

INSTALL_TEMPLATE = $(addprefix $(INSTALL_TEMPLATES_SUBDIR)/, \
                   $(subst $(CONFIG),top/configure,$(TEMPLATES)))
INSTALL_CONFIGS = $(CONFIGS:%= $(INSTALL_CONFIG)/%)

INSTALL_BPTS = $(BPTS:%= $(INSTALL_DBD)/%)
INSTALL_DBS = $(DBDINSTALL:%= $(INSTALL_DBD)/%)\
        $(RECTYPES:%.h= $(INSTALL_DBD)/%.dbd)\
        $(MENUS:%.h= $(INSTALL_DBD)/%.dbd)

INSTALL_DBDNAME = $(DBDNAME:%= $(INSTALL_DBD)/%)

#
# auto determine the directory paths that things are installed to
# RULES:
# 1) found in any one of several os specific area 
#       => install to $(INSTALL_INCLUDE)/os/$(OS_CLASS)
# 2) not foundin (1) and found in generic area 
#       => install to $(INSTALL_INCLUDE)
# 3) not found in (1) or (2) then may be (not yet) computer generated 
#       => install into $(INSTALL_INCLUDE)/os/$(OS_CLASS) and let
#       build rules work on vpath
#
# These rules guarantee that the users include from
# no more than two directories
#
INSTALL_INC += $(foreach inc, $(INC), \
    $(firstword \
        $(INSTALL_INC_hhh) \
        $(INSTALL_INC_ddd) \
        $(INSTALL_INC_iii) ) )

#
# Rule 1
#
INSTALL_INC_hhh = $(addprefix $(INSTALL_INCLUDE)/os/$(OS_CLASS)/, $(INSTALL_INC_ggg) )
INSTALL_INC_ggg = $(foreach dir, $(OS_SRC_DIRS), $(INSTALL_INC_fff)  )
INSTALL_INC_fff = $(subst $(dir)/, , $(INSTALL_INC_eee) )
INSTALL_INC_eee = $(wildcard $(addsuffix /$(inc), $(dir)) )

#
# Rule 2
#
INSTALL_INC_ddd = $(addprefix $(INSTALL_INCLUDE)/, $(INSTALL_INC_ccc) )
INSTALL_INC_ccc = $(foreach dir, .. $(SRC_DIRS), $(INSTALL_INC_bbb)  )
INSTALL_INC_bbb = $(subst $(dir)/, , $(INSTALL_INC_aaa) )
INSTALL_INC_aaa = $(wildcard $(addsuffix /$(inc), $(dir)) )

#
# Rule 3
#
INSTALL_INC_iii = $(INSTALL_INCLUDE)/os/$(OS_CLASS)/$(inc)

endif
