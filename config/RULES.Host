#
# $Id$
#
#	Rules for making things specified in Makefile.Host
#
#	Some rules for filename-massage are system specific
#	and have "ifdefs" here instead of using definitions
#	from CONFIG.Host.$(ARCH_CLASS)  -  sorry about this,
#	but so far the rules are quite similar on all systems
#	except WIN32 has some specials.
#
#	Maybe there is a way to use indentation to make it
#	easier to read this file?
#
#	Most things may also work if you say e.g.
#		VAR+=ADD
#	even if ADD is not there, but this way "VAR" would
#	be defined in any case, that's why I try to use
#		ifdef ADD
#		VAR+=ADD
#		endif
#
#	-kuk-

#	we are in O.$(ARCH_CLASS), but most sources are one dir above:
#
#	The use of VPATH (no suffix specification) caused everything
#	to break several times.
#	vpath, of course, has the disadvantage that we need explicit rules
#	for scripts or similar os-specific filed which have _no_ suffix...
vpath %.h $(USER_VPATH)   
vpath %.c $(USER_VPATH) ../os/$(ARCH_CLASS) ../os/generic ..
vpath %.cc $(USER_VPATH) ../os/$(ARCH_CLASS) ../os/generic ..
#	This prevents base/src/include/*.h from being installed. Why??
#vpath %.h ../os/$(ARCH_CLASS) ../os/generic ..
vpath %.h $(USER_VPATH)   

#	check for add-on CFLAGS and CXXFLAGS
#
#	Rules:
#	1) USR_CFLAGS is used
#	2) if there is a special USR_CFLAGS_$(ARCH_CLASS), it's
#	   appended to 1)
#	3) if there is no special defined, but a generic USR_CFLAGS_DEFAULT,
#	   this one is appended
#	4) if you have the special case that your USR_CFLAGS_$(ARCH_CLASS) is
#	   empty but you don't want 3), you have to define it as '-nil-', e.g.:
#		USR_CFLAGS = <defines for all systems>
#		USR_CFLAGS_sun4 = -nil-
#		USR_CFLAGS_DEFAULT = <defines for most systems, not sun4>
#
#	These rules apply to these Makefile-variables:
#	USR_CFLAGS	C flags
#	USR_CXXFLAGS	C++ flags
#	INC		include-files to install
#	LIBSRCS		source files for building library
#	PROD_LIBS	EPICS libs needed by PROD and TESTPROD
#	USR_LIBS	NONEPICS libs needed by PROD and TESTPROD
#	SYS_PROD_LIBS	system libs needed by PROD and TESTPROD
#	PROD		products to build and install
#	SCRIPTS		scripts to install
#
#	Remark:
#	If you define a special INC, e.g. INC_WIN32 = getopt.h,
#	the source (getopt.h) has to be in os/WIN32 (or os/<your ARCH_CLASS>)
#
#	This makes INC_$(ARCH_CLASS) slightly different from OSINC:
#	OSINC = a_file.h
#	means that you have a special  os/$(ARCH_CLASS)/a_file.h
#	for _every_ ARCH_CLASS.
#	If you use INC_$(ARCH_CLASS), you need the special include
#	only for the specified ARCH_CLASS!
#
ifneq (x$(USR_CFLAGS_$(ARCH_CLASS)),x)
USR_CFLAGS+=$(subst -nil-,,$(USR_CFLAGS_$(ARCH_CLASS)))
else
ifdef USR_CFLAGS_DEFAULT
USR_CFLAGS+=$(USR_CFLAGS_DEFAULT)
endif
endif

ifneq (x$(USR_CXXFLAGS_$(ARCH_CLASS)),x)
USR_CXXFLAGS+=$(subst -nil-,,$(USR_CXXFLAGS_$(ARCH_CLASS)))
else
ifdef USR_CXXFLAGS_DEFAULT
USR_CXXFLAGS+=$(USR_CXXFLAGS_DEFAULT)
endif
endif

#	check for special includes:
#
ifneq (x$(INC_$(ARCH_CLASS)),x)
#	os-specific includes go to the include/os-directory:
OSINC += $(subst -nil-,,$(INC_$(ARCH_CLASS)))
else
ifdef INC_DEFAULT
INC += $(INC_DEFAULT)
endif
endif

#	concat specific library contents (if defined) to LIBCONTENS
#
ifneq (x$(LIBSRCS_$(ARCH_CLASS)),x)
LIBSRCS += $(subst -nil-,,$(LIBSRCS_$(ARCH_CLASS)))
else

ifdef LIBSRCS_DEFAULT
LIBSRCS+=$(LIBSRCS_DEFAULT)
endif

endif

#	adjust object names for library contents
#
ifdef LIBSRCS
LIBOBJS=$(addsuffix $(OBJ), $(basename $(LIBSRCS)))
endif

#
#	concat specific library contents (if defined) to PROD_LIBS
#
ifneq (x$(PROD_LIBS_$(ARCH_CLASS)),x)
PROD_LIBS += $(subst -nil-,,$(PROD_LIBS_$(ARCH_CLASS)))

else

ifdef PROD_LIBS_DEFAULT
PROD_LIBS += $(PROD_LIBS_DEFAULT)
endif

endif

#
#	concat specific library contents (if defined) to USR_LIBS
#
ifneq (x$(USR_LIBS_$(ARCH_CLASS)),x)
USR_LIBS += $(subst -nil-,,$(USR_LIBS_$(ARCH_CLASS)))

else

ifdef USR_LIBS_DEFAULT
USR_LIBS += $(USR_LIBS_DEFAULT)
endif

endif

#
#	concat specific library contents (if defined) to SYS_PROD_LIBS
#
ifneq (x$(SYS_PROD_LIBS_$(ARCH_CLASS)),x)
SYS_PROD_LIBS += $(subst -nil-,,$(SYS_PROD_LIBS_$(ARCH_CLASS)))

else

ifdef SYS_PROD_LIBS_DEFAULT
SYS_PROD_LIBS += $(SYS_PROD_LIBS_DEFAULT)
endif

endif

#
#	concat specific products
#
ifneq (x$(PROD_$(ARCH_CLASS)),x)
PROD += $(subst -nil-,,$(PROD_$(ARCH_CLASS)))

else

ifdef PROD_DEFAULT
PROD += $(PROD_DEFAULT)
endif

endif

#
#	concat specific scripts
#
ifneq (x$(SCRIPTS_$(ARCH_CLASS)),x)
SCRIPTS += $(subst -nil-,,$(SCRIPTS_$(ARCH_CLASS)))

else

ifdef SCRIPTS_DEFAULT
SCRIPTS += $(SCRIPTS_DEFAULT)
endif

endif

#	adjust executables
ifdef TESTPROD
TESTPROD := $(addsuffix $(EXE), $(TESTPROD))
endif

#	adjust executables
ifdef PROD
PROD := $(addsuffix $(EXE), $(PROD))
endif

#---------------------------------------------------------------
#	if we are not building base add base includes and ld dirs
#	(convenience for extensions and applications)
ifneq ($(EPICS_BASE),$(TOP))
ifneq ($(EPICS_BASE),$(INSTALL_LOCATION))
EPICS_INCLUDES += -I$(EPICS_BASE_INCLUDE) -I$(EPICS_BASE_INCLUDE)/os/$(OS_CLASS)
endif
endif

#---------------------------------------------------------------
#	----------------------------------------------------
#	create names (lists) for installed things
#	----------------------------------------------------

#	each list starts with the destination directory name(s)
#	to make sure it's there


INCREC +=$(RECTYPES) $(MENUS)

INSTALL_PROD= $(PROD:%= $(INSTALL_BIN)/%)
INSTALL_LIBS= $(LIBNAME:%=$(INSTALL_LIB)/%)
INSTALL_DLLS=$(DLLNAME:%=$(INSTALL_BIN)/%)
INSTALL_TCLLIBS=$(TCLLIBNAME:%=$(INSTALL_TCLLIB)/%)
INSTALL_TCLINDEX=$(TCLINDEX:%=$(INSTALL_TCLLIB)/%)

INSTALL_INC= $(INC:%=$(INSTALL_INCLUDE)/%)
INSTALL_OSINCLUDE=$(INSTALL_INCLUDE)/os/$(ARCH_CLASS)
INSTALL_OSINC= $(OSINC:%= $(INSTALL_OSINCLUDE)/%)
INSTALL_INCREC = $(INCREC:%= $(INSTALL_INCLUDE)/%)
MANLIST = 1 2 3 4 5 6 7 8 9
INSTALL_MANS = $(foreach n, \
        $(MANLIST),$(INSTALL_MAN)/man$(n) $(MAN$(n):%= $(INSTALL_MAN)/man$(n)/%))
INSTALL_DOCS = $(DOCS:%= $(INSTALL_DOC)/%)
INSTALL_HTMLS = $(HTMLS:%= $(INSTALL_HTML)/$(HTMLS_DIR)/%)
INSTALL_SCRIPTS = $(SCRIPTS:%= $(INSTALL_BIN)/%)
ifdef TEMPLATES_DIR
INSTALL_TEMPLATES_SUBDIR = $(INSTALL_TEMPLATES)/$(TEMPLATES_DIR)
else
INSTALL_TEMPLATES_SUBDIR = $(INSTALL_TEMPLATES)
endif
INSTALL_TEMPLATE = $(TEMPLATES:%= $(INSTALL_TEMPLATES_SUBDIR)/%)
INSTALL_CONFIGS = $(CONFIGS:%= $(INSTALL_CONFIG)/%)
 
INSTALL_BPTS = $(BPTS:%= $(INSTALL_DBD)/%)
INSTALL_DBS = $(DBDINSTALL:%= $(INSTALL_DBD)/%)\
        $(RECTYPES:%.h= $(INSTALL_DBD)/%.dbd)\
        $(MENUS:%.h= $(INSTALL_DBD)/%.dbd)

INSTALL_DBDNAME = $(DBDNAME:%= $(INSTALL_DBD)/%)

MAN_DIRECTORY_TARGETS = $(foreach n, $(MANLIST),$(INSTALL_MAN)/man$(n))

DIRECTORY_TARGETS = $(INSTALL_INCLUDE) $(INSTALL_INCLUDE)/os \
	$(INSTALL_OSINCLUDE) $(INSTALL_DOC) $(INSTALL_DBD) \
	$(INSTALL_LOCATION_BIN) $(INSTALL_BIN) $(INSTALL_LIB) \
	$(INSTALL_LOCATION_LIB) $(INSTALL_CONFIG) \
	$(MAN_DIRECTORY_TARGETS) $(INSTALL_MAN) \
	$(INSTALL_TEMPLATES) 

ifdef TEMPLATES_DIR
DIRECTORY_TARGETS += $(INSTALL_TEMPLATES)/$(TEMPLATES_DIR)
endif

#---------------------------------------------------------------
#	if there are no objects LIBOBJS to include
#	in this library (may be for e.g. base/src/libCompat
#	on some archs), don't define (and build) any library!
ifdef LIBRARY
ifdef LIBOBJS
LIBTARGETS = $(INSTALL_LOCATION_LIB) $(INSTALL_LIB)
#	check if DLL or plain lib requested:
ifeq ($(LIBTYPE),SHARED)
#
# LIBTYPE=="SHARED" indicates build
# DLL and also build object archive library
#
LIBTARGETS += $(DLLNAME) $(INSTALL_DLLS) $(LIBNAME) $(INSTALL_LIBS)
else # LIBTYPE=SHARED
#
# otherwise build only object archive library
#
LIBTARGETS += $(LIBNAME) $(INSTALL_LIBS)
endif # LIBTYPE=SHARED
endif # LIBOBJS

#
# by default the libraries used when linking the DLL are just
# PROD_LIBS ans SYS_PROD_LIBS minus the DLL name
DLL_LIBS = $(subst $(LIBRARY),, $(PROD_LIBS))

endif # LIBRARY

#---------------------------------------------------------------
#	Main targets
#
all::	install

build:: $(LIBTARGETS) $(PROD) $(TESTPROD) \
	$(MENUS) $(RECTYPES) $(BPTS) $(DBDNAME)

inc:: $(INSTALL_INCLUDE) $(INSTALL_INC) \
	$(INSTALL_INCLUDE)/os $(INSTALL_OSINCLUDE) $(INSTALL_OSINC)

rebuild:: clean install

install:: inc buildInstall 

buildInstall :: build $(TARGETS) $(INSTALL_LOCATION_BIN) \
	$(INSTALL_BIN) $(INSTALL_SCRIPTS) $(INSTALL_PROD) \
	$(INSTALL_MAN) $(INSTALL_MANS) \
	$(INSTALL_DOC) $(INSTALL_DOCS) \
	$(INSTALL_HTMLS) \
	$(INSTALL_TEMPLATES) $(INSTALL_TEMPLATES_SUBDIR) $(INSTALL_TEMPLATE) \
	$(INSTALL_CONFIG) $(INSTALL_CONFIGS) \
	$(INSTALL_DBD) $(INSTALL_DBS) $(INSTALL_BPTS) \
	$(INSTALL_DBDNAME) $(INSTALL_INCREC) \
	$(INSTALL_TCLLIBS) $(INSTALL_TCLINDEX)

depends:: $(LIBSRCS) $(SRCS) 
	$(RM) .DEPENDS
	touch .DEPENDS
	$(DEPENDS_RULE)

clean::
	@echo "Cleaning"
	@$(RM) *.i *$(OBJ) *.a $(PROD) $(TESTPROD) $(LIBNAME) $(INC)

$(DIRECTORY_TARGETS) :
	$(MKDIR) $@


#---------------------------------------------------------------
#	Products
#
ifdef PROD

COND_PROD_SRCS=$(foreach prod, $(basename $(PROD)), $($(prod)_SRCS))
COND_PROD_LIBS=$(foreach prod, $(basename $(PROD)), $($(prod)_LIBS))

ifeq ($(COND_PROD_SRCS) $(COND_PROD_LIBS)x,x)
PRODNAME=$(PROD)
PRODNAME_SRCS=$(SRCS) $(PROD_SRCS)
endif

ifdef PRODNAME

$(PRODNAME): $(PROD_DEPLIBS) $(PRODNAME_DEPLIBS)

ifdef PRODNAME_SRCS
ifeq ($(findstring cc,$(suffix $(PRODNAME_SRCS))),cc)
PRODNAME_LINKER = $(LINK.cc)
else
PRODNAME_LINKER = $(LINK.c)
endif
PRODNAME_OBJS=$(addsuffix $(OBJ), $(basename $(PRODNAME_SRCS)))

$(PRODNAME): $(PRODNAME_OBJS)
	@$(RM) $@
	$(PRODNAME_LINKER) $(PRODNAME_OBJS) $(LDLIBS)

endif  # ifdef PRODNAME_SRCS

else # PRODNAME not defined

# We have to use the product's true dependancies and
# call make again to determine if product should be rebuilt

PROD_OBJS=$(addsuffix $(OBJ), $(basename $(SRCS)))
COND_PROD_OBJS=$(addsuffix $(OBJ), $(basename $(COND_PROD_SRCS)))

$(PROD): $(PROD_OBJS) $(COND_PROD_OBJS) $(PROD_DEPLIBS) $(COND_PROD_DEPLIBS)
	@$(MAKE) $@ PRODNAME="$@" \
	PRODNAME_SRCS="$(SRCS) $($(basename $@)_SRCS)" \
	PRODNAME_LIBS="$($(basename $@)_LIBS)"

endif  #ifdef PRODNAME

endif  #ifdef PROD

#---------------------------------------------------------------
#	Test Products
#

#	explicit list of source files given for TESTPROD ?
#	(otherwise implicit rule  .c -> $(OBJ) -> $(EXE)
ifdef TESTPROD_SRCS

ifeq ($(findstring cc,$(suffix $(TESTPROD_SRCS))),cc)
TESTPROD_LINKER = $(LINK.cc)
else
TESTPROD_LINKER = $(LINK.c)
endif

TESTPROD_OBJS=$(addsuffix $(OBJ), $(basename $(TESTPROD_SRCS)))

$(TESTPROD): $(TESTPROD_OBJS) $(PRODDEPLIBS)
	@$(RM) $@
	$(TESTPROD_LINKER) $(TESTPROD_OBJS) $(LDLIBS)
endif

#---------------------------------------------------------------
#	Generic Rules for 'simple' targets that
#	can be generated from a single source with same basename.
#
#	The usual two rules .c* -> $(OBJ) and then  $(OBJ) -> $(EXE)
#	do not work because the $(OBJ)->$(EXE) rule wouldn't
#	know if the original source was C or C++.
#
#	Hint: The $(subst...) construct removes the .c or .cc
#	      as well as the '../' from the filename and adds $(OBJ):
#	      e.g.  $< = '../abc.c'   ->  'abc.o'
#
#  The order of the following rules is
#  VERY IMPORTANT !!!!

%$(EXE): %.c
	@$(RM) $@
	$(COMPILE.c)  $<
	$(LINK.c)  $(subst ../,,$(basename $<))$(OBJ) $(LDLIBS)

%$(EXE): %.cc
	@$(RM) $@
	$(COMPILE.cc)  $<
	$(LINK.cc) $(subst ../,,$(basename $<))$(OBJ) $(LDLIBS)

%$(EXE): %.C
	@$(RM) $@
	$(COMPILE.cc)  $<
	$(LINK.cc) $(subst ../,,$(basename $<))$(OBJ) $(LDLIBS)

%$(OBJ): %.c
	@$(RM) $@
	$(COMPILE.c)  $<

%$(OBJ): %.cc
	@$(RM) $@
	$(COMPILE.cc)  $<

%$(OBJ): %.C
	@$(RM) $@
	$(COMPILE.cc)  $<

#
# rename the y.tab.h file only if we
# are creating it
#
%.h %.c: ../%.y
	$(RM) $*.c y.tab.c
ifeq ($(findstring -d, $(YACCOPT)),-d)
	$(RM) $*.h y.tab.h
endif
	$(YACC) $(YACCOPT) $<
	$(MV) y.tab.c $*.c
ifeq ($(findstring -d, $(YACCOPT)),-d)
	$(MV) y.tab.h $*.h
endif

%.c: ../%.l
	@$(RM) lex.yy.c
	$(LEX) $(LEXOPT) $<
	@$(RM) $@
	$(MV) lex.yy.c $@

#state notation language rule
%.c: ../%.st
	@echo "preprocessing $*.st"
	@$(RM) $*.i
	$(CPP) $(CPPFLAGS) $< $*.i
	@echo "converting $*.i"
	@$(RM) $@
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $*.i

%.c:	%.stt
	@echo "converting $<
	ln -s $< $*.st
	$(SNC) $(TARGET_SNCFLAGS) $(SNCFLAGS) $*.st
	@$(RM) $*.st
	
# Capfast Rules:
%.db: %.edf
	$(E2DB) $(E2DB_SYSFLAGS) $(E2DB_FLAGS) $<

%.db: ../%.edf
	$(E2DB) $(E2DB_SYSFLAGS) $(E2DB_FLAGS) $<

%.edf: ../%.sch
	@if [ ! -f cad.rc -a -r ../cad.rc ] ; then ln -s ../cad.rc ; fi
	$(SCH2EDIF) $(SCH2EDIF_SYSFLAGS) $(SCH2EDIF_FLAGS) $<

# Adl2dl rule
%.dl : ../%.adl
	-$(ADL2DL) $< $@

# Mangen Rule:
%.1:%
	$(MANGEN) -s $<
	$(MV) $(<F).nr $(<F).1

# Mangen Rule:
%.1:../%
	$(MANGEN) -s $<
	$(MV) $(<F).nr $(<F).1

$(INSTALL_DBD)/%: %
	@echo "Installing $@"
	@$(INSTALL) -m 644 $< $(INSTALL_DBD)
 
$(INSTALL_DBD)/%: ../%
	@echo "Installing $@"
	@$(INSTALL) -m 644 $< $(INSTALL_DBD)
 
%Record.h: %Record.dbd
	$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/dbToRecordtypeH$(EXE) \
	        $(USER_DBDFLAGS)  $<
 
%Record.h: ../%Record.dbd
	$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/dbToRecordtypeH$(EXE) \
	        $(USER_DBDFLAGS)  $<
 
menu%.h: menu%.dbd
	$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/dbToMenuH$(EXE) $<
 
menu%.h: ../menu%.dbd
	$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/dbToMenuH$(EXE) $<
 
bpt%.dbd: bpt%.data
	$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/makeBpt$(EXE) $<
 
bpt%.dbd: ../bpt%.data
	$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/makeBpt$(EXE) $<
 
$(DBDNAME): ../$(DBDEXPAND)
	@echo expanding dbd
	@$(RM) $@
	$(EPICS_BASE)/bin/$(HOST_ARCH)/dbExpand$(EXE) $(USER_DBDFLAGS) $< > $@

# rule for shareable (DLL- dynamic link library) creation
$(DLLNAME): $(LIBOBJS)
	$(LINK.dll) $(LIBOBJS) $(DLL_LDLIBS)

# rule for lib (archive of object files) creation
$(LIBNAME): $(LIBOBJS)
	$(RM) $@
	$(ARCMD) $(LIBOBJS)
ifdef RANLIB
	$(RANLIB) $@;
endif # RANLIB

$(INSTALL_BIN)/%: ../os/$(ARCH_CLASS)/%
	@echo "Installing os-specific script $@"
	@$(INSTALL_PRODUCT) -m 555 $< $(INSTALL_BIN)

$(INSTALL_BIN)/%: %
	@echo "Installing binary $@"
	@$(INSTALL_PRODUCT) -m 555 $< $(INSTALL_BIN)

$(INSTALL_BIN)/%: ../%
	@echo "Installing script $@"
	@$(INSTALL_PRODUCT) -m 555 $< $(INSTALL_BIN)

$(INSTALL_LIB)/%.a: %.a
	@echo "Installing library $@"
	@$(INSTALL) -m 644 $< $(INSTALL_LIB)
ifdef RANLIB
	$(RANLIB) $(RANLIBFLAGS) $@
endif # RANLIB

$(INSTALL_LIB)/%.lib: %.lib
	@echo "Installing library $@"
	@$(INSTALL) -m 644 $< $(INSTALL_LIB)

$(INSTALL_TCLLIB)/%: %
	@echo "Installing Tcl library $@"
	@$(INSTALL) -m 555 $< $(INSTALL_TCLLIB)
 
$(INSTALL_TCLLIB)/%: ../%
	@echo "Installing Tcl library $@"
	@$(INSTALL) -m 555 $< $(INSTALL_TCLLIB)
 
$(INSTALL_CONFIG)/%: %
	@echo "Installing config file $@"
	@$(INSTALL) -m 644 $< $(INSTALL_CONFIG)

$(INSTALL_CONFIG)/%: ../%
	@echo "Installing config file $@"
	@$(INSTALL) -m 644 $< $(INSTALL_CONFIG)

$(addsuffix /%,$(MAN_DIRECTORY_TARGETS)) : % 
	@echo "Installing man file $@"
	@$(INSTALL) -m 644 $< $(@D)

$(addsuffix /%,$(MAN_DIRECTORY_TARGETS)) : ../% 
	@echo "Installing man file $@"
	@$(INSTALL) -m 644 $< $(@D)

$(INSTALL_INCLUDE)/%: %
	@echo "Installing include file $@"
	@$(INSTALL) -m 644 $< $(@D)

$(INSTALL_INCLUDE)/%: ../%
	@echo "Installing include file $@"
	@$(INSTALL) -m 644 $< $(@D)

$(INSTALL_DOC)/%: %
	@echo "Installing doc $@"
	@$(INSTALL) -m 644 $< $(INSTALL_DOC)

$(INSTALL_DOC)/%: ../%
	@echo "Installing doc $@"
	@$(INSTALL) -m 644 $< $(INSTALL_DOC)

$(INSTALL_HTML)/$(HTMLS_DIR)/%: %
	@echo "Installing html $@"
	@$(INSTALL) -d -m 644 $< $(@D)

$(INSTALL_HTML)/$(HTMLS_DIR)/%: ../%
	@echo "Installing html $@"
	@$(INSTALL) -d -m 644 $< $(@D)

$(INSTALL_TEMPLATES)/$(TEMPLATES_DIR)/%: ../%
	@echo "Installing $@"
	@$(INSTALL) -d -m 644 $< $(@D)

$(INSTALL_TEMPLATES)/$(TEMPLATES_DIR)/%: %
	@echo "Installing $@"
	@$(INSTALL) -d -m 644 $< $(@D)

.PRECIOUS: %.o %.c

-include .DEPENDS

.PHONY:: all inc depends build install clean rebuild buildInstall

#	EOF RULES.Host
