#
#  $Id$
#
#  The developer may edit this file.

#  Site-specific build options
#
include $(EPICS_BASE)/config/CONFIG_SITE
 
#  EPICS base definitions
#
include $(EPICS_BASE)/config/CONFIG_COMMON
 
# assume T_A is the host arch if not specified
ifndef T_A
T_A = $(HOST_ARCH)
endif

#  Architecture specific definitions
#
include $(EPICS_BASE)/config/CONFIG.$(T_A)
#
include $(EPICS_BASE)/config/CONFIG_SITE.$(T_A)
 
#  All EPICS options other than BUILD_TYPE
#   may be overridden here.
#
# EXAMPLES
# --------
#  Build client objects statically ?  must be either YES or NO
#STATIC_BUILD=NO
#  Unix Optimization,   must be either YES or NO
#UNIX_OPT=YES
#  VxWorks Optimization,  must be either YES or NO
#VX_OPT=YES
#  Generate Verbose Compiler Warnings for Unix,  must be either YES or NO
#UNIX_WARN=YES
#  Generate Verbose Compiler Warnings for VxWorks,  must be either YES or NO
#VX_WARN=YES
#etc.
#

#CPLUSPLUS=G++
CPLUSPLUS=CCC
#ANSI=GCC
ANSI=ACC
#STANDARD=GCC
STANDARD=ACC

UNIX_WARN=YES
UNIX_OPT=YES
#UNIX_OPT_FLAGS = -g
#UNIX_OPT_FLAGS = -fast -pg 
#UNIX_OPT_FLAGS =   

VX_WARN=YES
#VX_WARN_YES = -ansi -Wall -pedantic

#STATIC_BUILD=YES

#
# include 030 object for the NI 030
#BUILD_ARCHS=$(HOST_ARCH) mv167 
#BUILD_ARCHS=$(HOST_ARCH) mv167 hknitro
#BUILD_ARCHS=$(HOST_ARCH) niCpu030
#BUILD_ARCHS=$(HOST_ARCH) mv167 
#CROSS_COMPILER_TARGET_ARCHS = mv167 niCpu030
CROSS_COMPILER_TARGET_ARCHS = mv167 


#ifeq ($(CPLUSPLUS), CCC)
#CCC = CC +w +p
##CCC = CC +w +p
#ACC = acc -pg 
#ACC = acc -vc 
#else
#ACC = gcc -Wall -D__USE_FIXED_PROTOTYPES__
#
# -Wcast-align 
#
# -I$(UNIX_GNU_LOCAL)lib/gcc-lib/$(G++MACHINE)/$(G++VERSION)/include 
#
#	-Wcast-qual \
#
# Need to sort this out
#
#	-nostdinc \
#	-I$(UNIX_GNU_LOCAL)lib/gcc-lib/$(G++MACHINE)/$(G++VERSION)/include \
#	-Wshadow \
#	-Wenum-clash \
# UNIX_GNU_LOCAL = /remote/jedi_local/
# UNIX_GNU_LOCAL = /usr/local/
#	-V$(G++VERSION) \
#	-b$(G++MACHINE) \
# G++MACHINE = sparc-sun-sunos4.1.3
# G++VERSION = 2.6.2
# UNIX_GNU_LOCAL = /remote/lear_local/
# G++ = $(UNIX_GNU_LOCAL)bin/g++ \
#	-B$(UNIX_GNU_LOCAL)lib/gcc-lib/ \
#	-Wall \
#	-Wmissing-prototypes -Woverloaded-virtual \
#	-Wwrite-strings -Wconversion -Wstrict-prototypes \
#	-ansi -pedantic -Wtraditional -Wpointer-arith \
#	-Winline 
#endif

#
# For APS
#
#SPECIAL_LANG = /usr/lang/SC3.0.1 (does not work on solaris)
EPICS_BASE=/home/phebos2/JHILL/epics/base
EPICS_EXTENSIONS=/home/phebos2/JHILL/epics/extensions
OPENWIN = /usr/openwin
VX_DIR=/usr/local/vw/vxV52p1/vw
VX_GNU = $(VX_DIR)/../vxgccV2.2.3.1

#
# For AOT8 
#
#SPECIAL_LANG = /usr/lang/SC3.0.1
#SITE_EPICS=/home/lear1/hill/epics
#OPENWIN = /usr/openwin
#VX_DIR=/usr/share/local/vx/v52
#VX_GNU = $(VX_DIR)/../gnu

#
# For AOT6 
#
#SPECIAL_LANG = /usr/lang/SC3.0.1
#ACC = acc -pg
#ACC = acc
#SITE_EPICS=/epics/release/r3.12.1/r3.12.2.beta/
#OPENWIN = /usr/openwin
#VX_DIR=/lcs/share/local/vx/v51
#X11_LIB = /usr/openwin/lib
#X11_INC = /usr/openwin/include/
#EPICS_EXTENSIONS = /epics/release/r3.12.1/r3.12.2.beta/extensions
#VX_GNU = $(VX_DIR)/../??????



