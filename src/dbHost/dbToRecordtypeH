#!/usr/bin/perl

use DBD;
use DBD::Parser;
use Getopts;
use macLib;
use Readfile;

my $tool = 'dbToRecordtypeH';
getopts('DI@o:') or
    die "Usage: $tool [-D] [-I dir] [-o xRecord.h] xRecord.dbd [xRecord.h]\n";

my @path = map { split /[:;]/ } @opt_I;
my $dbd = DBD->new();

my $infile = shift @ARGV;
$infile =~ m/\.dbd$/ or
    die "$tool: Input file '$infile' must have '.dbd' extension\n";

my $outfile;
if ($opt_o) {
    $outfile = $opt_o;
} elsif (@ARGV) {
    $outfile = shift @ARGV;
} else {
    ($outfile = $infile) =~ s/\.dbd$/.h/;
    $outfile =~ s/^.*\///;
    $outfile =~ s/dbCommonRecord/dbCommon/;
}

# Derive a name for the include guard
my $guard_name = "INC_$outfile";
$guard_name =~ tr/a-zA-Z0-9_/_/cs;
$guard_name =~ s/(_[hH])?$/_H/;

&ParseDBD($dbd, &Readfile($infile, 0, \@opt_I));

my $rtypes = $dbd->recordtypes;
die "$tool: Input file must contain a single recordtype definition.\n"
    unless (1 == keys %{$rtypes});

if ($opt_D) {   # Output dependencies only, to stdout
    my %filecount;
    my @uniqfiles = grep { not $filecount{$_}++ } @inputfiles;
    print "$outfile: ", join(" \\\n    ", @uniqfiles), "\n\n";
    print map { "$_:\n" } @uniqfiles;
} else {
    open OUTFILE, ">$outfile" or die "$tool: Can't open $outfile: $!\n";
    print OUTFILE "/* $outfile generated from $infile */\n\n",
        "#ifndef $guard_name\n",
        "#define $guard_name\n\n",
        "#include \"recDecls.h\"\n\n",
        "#ifdef __cplusplus\n",
        "extern \"C\" {\n",
        "#endif\n\n";

    my $menus = $dbd->menus;
    while (($name, $menu) = each %{$menus}) {
        print OUTFILE $menu->toDeclaration;
    }
    print OUTFILE "\n" if scalar %{$menus};

    my ($rn, $rtyp) = each %{$rtypes};
    print OUTFILE $rtyp->toDeclaration;

    unless ($rn eq 'dbCommon') {
        my $n=0;
        print OUTFILE "\ntypedef enum {\n",
            join(",\n", map { "\t${rn}Record$_ = " . $n++ } $rtyp->field_names),
            "\n} ${rn}FieldIndex;\n\n";
        print OUTFILE "#ifdef GEN_SIZE_OFFSET\n",
            join("\n",
                map { "static const char ${rn}FieldName$_\[] = \"$_\";" }
                $rtyp->field_names),
            "\n\n";
        $n=0;
        print OUTFILE "static const dbRecordData ${rn}RecordRecordData;\n\n",
            "static dbFldDes ${rn}RecordFieldData[] = {\n",
            join(",\n", map {
                    my $fn = $_->name;
                    "    { ${rn}RecordFieldName$fn," .
                        $_->dbf_type . ',"' .
                        $_->attribute('initial') . '",' .
                        ($_->attribute('special') || '0') . ',' .
                        ($_->attribute('pp') || 'FALSE') . ',' .
                        ($_->attribute('interest') || '0') . ',' .
                        ($_->attribute('asl') || 'ASL0') . ',' .
                        $n++ . ",\n\t\&${rn}RecordRecordData," .
                        "GEOMETRY_DATA(${rn}Record," . lc($fn) . ') }';
                } $rtyp->fields),
            "\n};\n\n";
        print OUTFILE "static const short ${rn}RecordFieldLinks[] = {\n",
            join(",\n", map {
                    "    ${rn}Record" . $_->name; 
                } grep {
                    $_->dbf_type =~ m/^DBF_(IN|OUT|FWD)LINK/;
                } $rtyp->fields),
            "\n};\n\n";
        my @sorted_names = sort $rtyp->field_names;
        print OUTFILE "static const char * const ${rn}RecordFieldSortedNames[] = {\n",
            join(",\n", map {
                "    ${rn}RecordFieldName$_"
            } @sorted_names),
            "\n};\n\n";
        print OUTFILE "static const short ${rn}RecordFieldSortedIndex[] = {\n",
            join(",\n", map {
                "    ${rn}Record$_"
            } @sorted_names),
            "\n};\n\n";
        print OUTFILE "extern rset ${rn}RSET;\n\n",
            "static const dbRecordData ${rn}RecordRecordData = {\n",
            "    \"$rn\",\n",
            "    sizeof(${rn}Record),\n",
            "    NELEMENTS(${rn}RecordFieldData),\n",
            "    ${rn}RecordFieldData,\n",
            "    ${rn}RecordVAL,\n",
            "    \&${rn}RecordFieldData[${rn}RecordVAL],\n",
            "    NELEMENTS(${rn}RecordFieldLinks),\n",
            "    ${rn}RecordFieldLinks,\n",
            "    ${rn}RecordFieldSortedNames,\n",
            "    ${rn}RecordFieldSortedIndex,\n",
            "    \&${rn}RSET\n",
            "};\n\n";
        my @menu_fields = grep {
                $_->dbf_type eq 'DBF_MENU'
            } $rtyp->fields;
        my %menu_uniq;
        my @menu_names = grep {
                !$menu_uniq{$_}++
            } map {
                $_->attribute('menu')
            } @menu_fields;
        print OUTFILE join ("\n", map {
                "extern dbMenu ${_}MenuData;"
            } @menu_names), "\n\n";
        print OUTFILE "dbRecordType * ${rn}RecordRegistrar(dbBase *pbase, int nDevs)\n",
            "{\n",
            "    dbRecordType *prt;\n";
        print OUTFILE map {
                "    dbRegisterMenu(pbase, \&${_}MenuData);\n"
            } @menu_names;
        print OUTFILE map {
                "    ${rn}RecordFieldData[${rn}Record" . 
                $_->name .
                "].typDat.pmenu = \&" .
                $_->attribute('menu') .
                "MenuData;\n"
            } @menu_fields;
        # ... FIXME ... Missing prt, devMenu, CT_HEX/CT_DECIMAL
        print OUTFILE "    return prt;\n}\n\n",
            "epicsExportRegistrar(${rn}RecordSizeOffset);\n",
            "#endif\n";
    }
    print OUTFILE "\n#ifdef __cplusplus\n",
        "} /* extern \"C\" */\n",
        "#endif\n\n",
        "#endif /* $guard_name */\n";
    close OUTFILE;
}
