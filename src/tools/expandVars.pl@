#!/usr/bin/perl
#
# Tool to expand @VAR@ variables while copying a file.
# The file will *not* be copied if it already exists.
#
# Author: Andrew Johnson <anj@aps.anl.gov>
# Date: 10 February 2005
#
# $Id$
#

BEGIN {
    # Do not copy this BEGIN code for other tools,
    # it's only needed here for bootstrapping itself.
    our $libperl = '@TOP@/lib/perl';
    $libperl = '..' if ($libperl =~ m/^[@]TOP[@]/);
}
use lib $libperl;

use strict;
use Cwd qw(abs_path);
use EPICS::Getopts;     # Needed for multiple options (-D m=v)
use EPICS::Utils;       # LocalPath, readRelease, expandRelease

# Process command line options
our ($opt_d, @opt_D, $opt_h, $opt_t);
getopts('dD@ht:')
    or &HELP_MESSAGE;

# Handle the -h command
&HELP_MESSAGE if $opt_h;

die "Path to TOP not set, use -t option\n"
    unless $opt_t;

# Check filename arguments
my $infile = shift
    or die "No input filename argument\n";
my $outfile = shift
    or die "No output filename argument\n";

# Where are we?
my $top = LocalPath(abs_path($opt_t));
print "TOP = $top\n" if $opt_d;

# Read RELEASE file into vars
my %vars = (TOP => $top);
my @apps = ('TOP');
readRelease("$top/configure/RELEASE", \%vars, \@apps);
expandRelease(\%vars);

while ($_ = shift @opt_D) {
    my ($var, $val) = split /=/;
    $vars{$var} = $val;
    print "$var = $val\n" if $opt_d;
}

# Do it!
copyFile($infile, $outfile, \%vars);

##### File contains subroutines only below here

sub HELP_MESSAGE {
    print STDERR <<EOF;
Usage:
    expandVars.pl -h
        Display this Usage message
    expandVars.pl -t /path/to/top -D var=val -D var2=val2 ... infile outfile
        Expand vars in infile to generate outfile
EOF
    exit $opt_h ? 0 : 1;
}
