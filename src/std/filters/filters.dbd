#=head1 Channel Filters
#
# Channel Filters can be applied to Channel Access channels by a client, using
# a JSON Field Modifier to select the filter and any parameters.
# The following filters are available in this release:
#
#=over 4
#
#=item * L<TimeStamp|/"TimeStamp Filter (ts)">
#
#=item * Deadband
#
#=item * Array
#
#=item * Synchronized
#
#=back
#
#=head2 Using Filters
#
# Channel filters can be added to any Channel Access channel name.
# There can be more than one filter applied to the same channel, in which case the
# order that they are specified will control the order in which they are applied
# to the resulting data-stream.
# The filter specification must appear after the field name, or if the default
# (VAL) field is used after a dot C<.> appended to the record name.
# With the exception of the array short-hand which is described below, all filters
# must appear inside a pair of braces C< {} > after the dot expressed as a JSON
# (L<JavaScript Object Notation|http://www.json.org/>) object, which allows filter
# parameters to be included as needed.
#
# Each filter is given as a name/value pair. The filter name (given in parentheses
# in the titles below) is a string, and must be enclosed inside double-quotes C<">
# characters as per the JSON specification.
# Paramters to that filter are provided as the value part of the name/value pair,
# and will normally appear as a child JSON object inside another pair of braces C< {} >.
#
#=head4 Example Filter
#
# Given a record called C<test:channel> the following would apply a filter C<f> to
# the VAL field of that record, giving the filter two numeric parameters named C<lo>
# and C<hi>:
#
#  test:channel.{"f":{"lo":0,"hi":10}}
#
# Note that due to the required presence of the double-quote characters in the JSON
# strings in the channel name it will usually be necessary to enclose a filtered name
# within single-quotes C<'...'> when typing it as an argument to a Unix shell command.
#
#=head2 Filter Reference
#
#=head3 TimeStamp Filter (C<ts>)
#
# This filter is used to set the timestamp of the (first) value fetched through the
# channel to the connection time, rather than the time the record last processed
# which could have been days or even weeks ago for some records, or set to the
# EPICS epoch if the record has never processed.
#
#=head4 Parameters
#
# None, use an empty pair of braces.
#
#=head4 Example
#
#  Hal$ caget -a 'test:channel.{"ts":{}}'
#  test:channel.{"ts":{}}   2012-08-28 22:10:31.192547 0 UDF INVALID
#  Hal$ caget -a 'test:channel'
#  test:channel             <undefined> 0 UDF INVALID
#
#=cut
registrar(tsInitialize)
registrar(dbndInitialize)
registrar(arrInitialize)
registrar(syncInitialize)
